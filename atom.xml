<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-12T09:08:28.836Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>arderbud</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>stub&amp;lazy bind</title>
    <link href="http://yoursite.com/2020/01/12/stub&amp;lazy%20bind/"/>
    <id>http://yoursite.com/2020/01/12/stub&amp;lazy%20bind/</id>
    <published>2020-01-12T01:39:50.770Z</published>
    <updated>2020-01-12T09:08:28.836Z</updated>
    
    <content type="html"><![CDATA[<p> When i learn mach-o format before,i  just know a little about stub. Now i have enough  free time to study it. so record it. I try to explain how stubs work detaily,hope it can helpful. </p><h3 id="Tool"><a href="#Tool" class="headerlink" title="Tool"></a>Tool</h3><ul><li>Xcode</li><li>MachOView</li><li>Hopper Disassember </li><li><a href="https://opensource.apple.com/tarballs/dyld/" target="_blank" rel="noopener">dyld-551.3</a></li></ul><h3 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h3><h4 id="prepare"><a href="#prepare" class="headerlink" title="prepare"></a>prepare</h4><ol><li><p>Use <code>Xcode</code>start a <code>Command Line Tool</code>project in macOS, here i just named <code>stubDebug</code>for demonstrate. Then replace the default <code>NSLog(@&quot;Hello world&quot;);</code>to <code>printf(@&quot;Hello, World!\n&quot;);</code>,like below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">int main(int argc, const char * argv[]) &#123;</span><br><span class="line">    @autoreleasepool &#123;</span><br><span class="line">        &#x2F;&#x2F; insert code here...</span><br><span class="line">        printf(&quot;Hello, World!\n&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li>Compile the project to generate the executable <code>stubDebug</code>(mach-o format),the drag it to both <code>MachOView</code>and <code>Hopper Disassember</code></li></ol><h4 id="analysis"><a href="#analysis" class="headerlink" title="analysis"></a>analysis</h4><p>In <code>Hopper Disassember</code>,let’s start with <code>_main</code>label,we can find  an instruction  below</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000100000f48         call       imp___stubs__printf</span><br></pre></td></tr></table></figure><p>this is the point where our source code<code>printf(&quot;Hello, World!\n&quot;);</code>execute.</p><p>Click the <code>imp___stubs__printf</code>label ,jump to </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000100000f6e         jmp        qword [_printf_ptr]</span><br></pre></td></tr></table></figure><p>Then click <code>_printf_prt</code>label, jump to</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">0000000100001020         dq         _printf</span><br></pre></td></tr></table></figure><p>The <code>_printf</code>is just a tip,not a acture address.So we will find the address <code>0x100001020</code> in <code>MachOView</code>,it locates in <code>__DATA,_la_symbol_ptr</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100001020  0000000100000F98 Indirect Pointer [0x100001020 -&gt; _print]</span><br></pre></td></tr></table></figure><p>Then go to address <code>0x100000F98</code>,it locates in <code>__TXEXT,__stub_helper</code></p><p>For easy, we use <code>Hopper Disassember</code>to ayalysis go on.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">     ; Section __stub_helper</span><br><span class="line">0000000100000f74         lea        r11, qword [dyld_stub_binder_100001000+8]   ; CODE XREF&#x3D;0x100000f89, 0x100000f93, 0x100000f9d</span><br><span class="line">0000000100000f7b         push       r11</span><br><span class="line">0000000100000f7d         jmp        qword [dyld_stub_binder_100001000]          ; dyld_stub_binder</span><br><span class="line">0000000100000f83         db         0x90</span><br><span class="line">0000000100000f84         push       0x0</span><br><span class="line">0000000100000f89         jmp        0x100000f74</span><br><span class="line">0000000100000f8e         push       0x1f</span><br><span class="line">0000000100000f93         jmp        0x100000f74</span><br><span class="line">0000000100000f98         push       0x3f  ;</span><br><span class="line">0000000100000f9d         jmp        0x100000f74</span><br><span class="line"></span><br><span class="line">                     dyld_stub_binder_100001000:</span><br><span class="line">0000000100001000         dq         dyld_stub_binder                            ; DATA XREF&#x3D;0x100000f7d</span><br><span class="line">0000000100001008         dq         0x0000000000000000                          ; DATA XREF&#x3D;0x100000f74</span><br></pre></td></tr></table></figure><p>When we arrive in address <code>0x100000f98</code>, then we push <code>0x3f</code>, push <code>0x100001008</code>,then jump <code>dyld_stub_binder</code>.</p><p>What do <code>0x3f</code>and <code>0x100001008</code>mean? We will explain it for later, for now, we just consider they are two numberes.</p><p>Then wo search <code>dyld_sub_binder</code>in <code>dyld-551.3</code>source code. It’t a assembler code.We look at the <code>__x86_64__</code>architecture,</p><p>What a bad luck, it’s too long! Don’t lose heart.We will only  analysis  some instruction below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> movqMH_PARAM_RBP(%rbp),%rdi# call fastBindLazySymbol(loadercache, lazyinfo)</span><br><span class="line">movqLP_PARAM_RBP(%rbp),%rsi</span><br><span class="line">call__Z21_dyld_fast_stub_entryPvl</span><br><span class="line">movq%rax,%r11# copy jump target</span><br></pre></td></tr></table></figure><p>Then we search <code>fastBindLazySymbol</code>,it’s a <code>c++</code>code.The <code>0x3f</code>and <code>0x100001008</code>are two parameters here actually (0x3f -&gt; <code>lazyBindingInfoOffset</code>, 0x100001008 -&gt; <code>imageLoaderCache</code>)</p><p>Now,<code>imageLoaderCache</code>is  0x100001008, <code>*imageLoaderCache</code>is the data located in address <code>0x100001008</code>,we can find the the data in address <code>0x100001008</code> is <code>0x0000000</code> in <code>MachOView</code>. </p><p>So we will arrive at <code>dyld::findMappedRange</code>,it’t a  fast address-&gt;image lookups. Simply explain, it will find the ImageLoader* where address <code>0x100001008</code>locates in. It’s our <code>stubDebug</code>main executable certainly.</p><p>Then execute <code>doBindFastLazySymbol</code> function. Let’s look at the <code>ImageLoaderMachOCompressed::doBindFastLazySymbol</code></p><p>First will focus on code below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getLazyBindingInfo(lazyBindingInfoOffset, start, end, &amp;segIndex, &amp;segOffset, &amp;libraryOrdinal, &amp;symbolName, &amp;doneAfterBind)</span><br></pre></td></tr></table></figure><p>The code will analysis <code>Laze Binding Info</code>for offset <code>0x3f</code>.Open <code>MachOView</code> again, find <code>Dynamic Loader Info -&gt;Lazy Binding Info</code>.The <code>Lazy Binding Info</code> start as <code>0x100002020</code>, then add offset <code>0x3f</code>,we get address <code>0x10000205f</code>,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">10000205E 00                BIND_OPCODE_DONE</span><br><span class="line">10000205F 72                BIND_OPCODE_SET_SEGMENT_AND_OFFSET_ULEB   segment(2)</span><br><span class="line">100002060 20                uleb128                                   offset(32)</span><br><span class="line">100002061 13                BIND_OPCODE_SET_DYLIB_ORDINAL_IMM         dylib(3)</span><br><span class="line">100002062 40                BIND_OPCODE_SET_SYMBOL_TRAILING_FLAGS_IMM falgs(0)</span><br><span class="line">100002063 5F7072696E746600  string                                    name(_printf)</span><br><span class="line">10000206B 90                BIND_OPCODE_DO_BIND</span><br></pre></td></tr></table></figure><p>The <code>MachOView</code>is already help us to explain the meaning for every filed. So we go back <code>ImageLoaderMachOCompressed::doBindFastLazySymbol</code> , know that:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">segIndex &#x3D; 2;    &#x2F;&#x2F; 0 is &#96;__PAGEZERO&#96;,1 is &#96;__TEXT&#96;,2 is &#96;__DATA&#96;</span><br><span class="line">segOffset &#x3D; 32;</span><br><span class="line">libraryOrdinal &#x3D; 3; &#x2F;&#x2F; 1:LC_LOAD_DYLIB(Foundation) 2:LC_LOAD_DYLIC(libobjc.A.dylib) 3:LC_LOAD_DYLIB(libSystem.B.dylib)</span><br><span class="line">symbolName &#x3D; &quot;_printf&quot;;</span><br></pre></td></tr></table></figure><p>The general idea for this <code>Lazy Binding Info</code>is go to <code>dylib(3)</code>find symbol <code>_printf</code>address , then fill the address in this <code>segment(2)</code> segment with <code>offset(32)</code>.</p><p>Then focus on code below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">  uintptr_t address &#x3D; segActualLoadAddress(segIndex) + segOffset;</span><br><span class="line">result &#x3D; this-&gt;bindAt(context, address, BIND_TYPE_POINTER, symbolName, 0, 0, libraryOrdinal, &quot;lazy &quot;, NULL, true);</span><br></pre></td></tr></table></figure><p><code>segIndex =2</code>，is’s <code>__DATA</code>segment.(0 is <code>__PAGEZERO</code>,1 is <code>__TEXT</code>,2 is <code>__DATA</code>).</p><p>Follow the <code>segActualLoadAddress</code>function,look at the <code>LC_SEGMENT_64(__DATA)</code>in <code>MachOView</code>,The VM Address is <code>0x100001000</code>，then add offset 0x20(segOffset=32),we get address = 0x100001020; It is the <code>_printf</code>placeholer. We know it before actually ,the <code>0x100001020</code>will jump <code>__stub_helper</code>before ,but now we will fill in actual address of  <code>_printf</code>.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">100001020  0000000100000F98 Indirect Pointer [0x100001020 -&gt; _print]</span><br></pre></td></tr></table></figure><p>Then look at <code>bindAt</code>function,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> &#x2F;&#x2F; resolve symbol</span><br><span class="line">symbolAddress &#x3D; this-&gt;resolve(context, symbolName, symbolFlags, libraryOrdinal, &amp;targetImage, last, runResolver);</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F; do actual update</span><br><span class="line">return this-&gt;bindLocation(context, addr, symbolAddress, type, symbolName, addend, this-&gt;getPath(), targetImage ? targetImage-&gt;getPath() : NULL, msg);</span><br></pre></td></tr></table></figure><p>The <code>resolve</code> call stack is  almost follows:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-resolve()</span><br><span class="line">  -libImage((unsigned int)libraryOrdinal-1)</span><br><span class="line">  -resolveTwolevel()</span><br><span class="line">    -findExportedSymbolAddress()</span><br><span class="line">      -findExportedSymbol()</span><br><span class="line">        -ImageLoaderMachOCompressed::findShallowExportedSymbol()</span><br><span class="line">      -getExportedSymbolAddress()</span><br></pre></td></tr></table></figure><p>Let’s focus on <code>libImage((unsigned int)libraryOrdinal-1)</code>first. the <code>libraryOrdinal</code>is 3 actually depend on above.In this <code>stubDebug</code>project,libImage(3-1) mean <code>libSystem.B.dylib</code>.Why? We can see <code>stubDebug</code> in <code>MachOView</code> for <code>Load Commands</code>part. We can see </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LC_LOAD_DYLIB(Foundation)</span><br><span class="line">LC_LOAD_DYLIB(libobjc.A.dylib)</span><br><span class="line">LC_LOAD_DYLIB(libSystem.B.dylib)</span><br></pre></td></tr></table></figure><p>Then focus on <code>findExportedSymbol</code>, <del>Because <code>libSystem.B.dylib</code>is a collection of <code>libsystem_c.dylib</code>,<code>libsystem_kernal.dylib</code>…… It will look up for ecah,(I just guess).</del></p><p>We know <code>_printf</code>is in <code>libsystem_c.dylib,</code>,so we assume we are in <code>libsystem_c.dylib</code>,then execute <code>findShallowExportedSymbol</code>,this function look up <code>Dynamic Loader Info</code> -&gt;<code>Export Info</code> of  <code>libsystem_c.dylib</code></p><p>Open <code>libsystem_c.dylib</code>in<code>MachOView</code>,The <code>Export Info</code>is a trie,we can find <code>_printf</code> in logic below:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">92972 5F00 Node Lable &#39;_&#39;</span><br><span class="line">92974 25   Next Node  0x92980</span><br><span class="line">      929E9 7000 Node Label &#39;p&#39;</span><br><span class="line">      929EB 8F3C Next Node 0x94777</span><br><span class="line">            94700 72696E746600 Node Label &#39;rintf&#39;</span><br><span class="line">            9779F B08401       Next Node   0x96B98</span><br><span class="line">                  96B9A C49D10  Symbol Offset Ox40EC4</span><br></pre></td></tr></table></figure><p>Now, we get the symbol offset 0x40EC4,this is  the address of the symbol <code>_printf</code>actually.We can confirm it in <code>Hopper Disassembler</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">                     _printf:</span><br><span class="line">0000000000040ec4         push       rbp</span><br></pre></td></tr></table></figure><p>Now,We find the address of symbol <code>_printf</code>, and we also know we should bind it to <code>stubDebug</code>‘s address <code>0x100001020</code>in <code>__DATA,_la_symbol_ptr</code>,to replace <code>__TEXT,__stub_helper</code>with<code>_printf</code>,We finish the lazy bind.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; When i learn mach-o format before,i  just know a little about stub. Now i have enough  free time to study it. so record it. I try to exp
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>dyld overview</title>
    <link href="http://yoursite.com/2020/01/03/dyld%20overview/"/>
    <id>http://yoursite.com/2020/01/03/dyld%20overview/</id>
    <published>2020-01-03T09:37:38.378Z</published>
    <updated>2020-01-03T12:34:26.593Z</updated>
    
    <content type="html"><![CDATA[<h2 id="dyld-overview"><a href="#dyld-overview" class="headerlink" title="dyld overview"></a>dyld overview</h2><p>I just try to overview the dyld for that developers who has difficult to read dyld opensource. Let’s start.</p><h4 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h4><p>For iOS app developers you should know that when we write an app,we need  normally depend on a lots of dynamic frameworks.Those framework do not packeted in our app, they are in system directory some where.How our code can find them, use them? This is the work that dyld should to do.</p><h4 id="User-space"><a href="#User-space" class="headerlink" title="User space"></a>User space</h4><p>When we tap an app icon,then an app is started.App is a process.It has owned user space . </p><p>What is user space? If you don’t know  clearly,you can just consider it as data address. Assume code <code>int i =3; int *p = &amp;i</code>in c langurage ,p is the address of var i.</p><p>The code where  we write app to,and the dynamic framework we denpening on,They are all in the user space.Like figure 1-1</p><p>Figure 1-1</p><img src="https://s2.ax1x.com/2020/01/03/larzGj.png" alt="larzGj.png" style="zoom:50%;" /><p>You can set <code>DYLD_PRINT_SEGMENTS</code> environment variables to see dyld logs in case deepen the impression. Also user <code>image list</code>lldb instrument  to debug.</p><h4 id="Symbol-bind"><a href="#Symbol-bind" class="headerlink" title="Symbol bind"></a>Symbol bind</h4><p>Now,we have knowed  all the addresses of dynamic framework we depend on.Then we can bind symbol.</p><p>What is symbol bind?For example, assume  code <code>Class cls = [NSObjcet class];</code>,we use the <code>+[NSObject class]</code>method.When we write code, we donnot know the the address of <code>+[NSObject class]</code>method.We can use a placeholer for the method, like figure 1-2.</p><p>Figure 1-2.</p><img src="https://s2.ax1x.com/2020/01/03/larxiQ.png" alt="larxiQ.png" style="zoom: 50%;" /><p>But now we know the actual address,the we can fill in it.Assume the address of method <code>+[NSObject class]</code> is 0x7fffad1bf140,After fill in,like figure 1-3</p><p>Figure 1-3</p><img src="https://s2.ax1x.com/2020/01/03/layKhQ.png" alt="layKhQ.png"  /><p>This is so-called <code>bind</code>.</p><p><strong>So far,the dyld’s main work is done.</strong></p><h4 id="One-more-thing"><a href="#One-more-thing" class="headerlink" title="One more thing"></a>One more thing</h4><p>If you read the dyld opensource,you can’t go around the <code>dyld_shared_cache</code>，<code>imageLoader</code>,what are they? I just apply a figure 1-4,leave the rest to you.</p><p>Figure 1-4.</p><p><img src="https://s2.ax1x.com/2020/01/03/laTAPI.png" alt="laTAPI.png"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;dyld-overview&quot;&gt;&lt;a href=&quot;#dyld-overview&quot; class=&quot;headerlink&quot; title=&quot;dyld overview&quot;&gt;&lt;/a&gt;dyld overview&lt;/h2&gt;&lt;p&gt;I just try to overview the
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CATransaction</title>
    <link href="http://yoursite.com/2019/12/25/CATransaction/"/>
    <id>http://yoursite.com/2019/12/25/CATransaction/</id>
    <published>2019-12-25T09:55:43.935Z</published>
    <updated>2019-12-25T09:55:43.935Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CATransaction"><a href="#CATransaction" class="headerlink" title="CATransaction"></a>CATransaction</h2><h4 id="Overview"><a href="#Overview" class="headerlink" title="Overview"></a>Overview</h4><ul><li><code>CATransaction</code>is unique in thread.</li><li>Implicit transaction is only uesd when there is no  active transaction while change the layer tree.</li><li><code>CATransaction</code>capture layer tree changes  just  by mark the root layer.</li></ul><h4 id="Topics"><a href="#Topics" class="headerlink" title="Topics"></a>Topics</h4><ul><li><code>+[CATransaction begin]</code>    just add 1 in specific var.</li><li>Change layer tree. </li><li><code>+[CATransaction commit]</code> sub 1 in specific var. if var is 0, then commit actally. Ensure nested transaction are commited completely.</li></ul><h4 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h4><p>Change the layer follows 3 step.</p><ol><li><p>CA::Layer::begin_change(CA::Transaction*,unsigned int,objc_object*&amp;)</p><ul><li>call <code>CA::Transaction::ensure_implicit()</code> make sure that add an implicit transaction if there is no active transaction.</li><li>call <code>-[CALayer actionForkKey:]</code>,find the CAAnimation correspond with the property. Store it to objc_object*&amp;.</li></ul></li><li><p>Change property.</p></li><li><p>CA::Layer::end_change(CA::Transaction<em>,unsigned int,,objc_object\</em>&amp;),</p><ul><li><p>call <code>CA::Transaction::add_root()</code> mark the root layer of  the updated layer tree</p></li><li><p>call <code>CA::Layer::add_animation()</code> set CATransaction values to the animation(like duration,timingFunction.just guess.)</p></li></ul></li></ol><p>   ​       </p><p>​    </p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CATransaction&quot;&gt;&lt;a href=&quot;#CATransaction&quot; class=&quot;headerlink&quot; title=&quot;CATransaction&quot;&gt;&lt;/a&gt;CATransaction&lt;/h2&gt;&lt;h4 id=&quot;Overview&quot;&gt;&lt;a href=&quot;#O
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
